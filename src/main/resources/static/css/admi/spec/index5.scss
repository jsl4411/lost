// ---------------------------------------------------------
// @TOC
// ---------------------------------------------------------

// + @Variables
// + @Base
// + @Gap (0 > 4 Step 1)
// + @Gap (5 > 35 Step 5)
// + @Gap (40 > 160 Step 10)

// ---------------------------------------------------------
// @Variables
// ---------------------------------------------------------

$responsive: true;

// ---------------------------------------------------------
// @Base
// ---------------------------------------------------------

[class*='gap'] {
  width: auto !important;
  overflow: hidden !important;
}

// ---------------------------------------------------------
// @Gap (0 > 4 Step 1)
// ---------------------------------------------------------

@for $i from 0 through 4 {
  .gapX-#{$i} {
    margin-left: #{($i / -2)}px !important;
    margin-right: #{($i / -2)}px !important;

    & > * {
      padding-left: #{($i / 2)}px !important;
      padding-right: #{($i / 2)}px !important;
    }
  }

  .gapY-#{$i} {
    margin-top: #{($i / -2)}px !important;
    margin-bottom: #{($i / -2)}px !important;

    & > * {
      padding-top: #{($i / 2)}px !important;
      padding-bottom: #{($i / 2)}px !important;
    }
  }

  .gap-#{$i} {
    margin: #{($i / -2)}px !important;

    & > * {
      padding: #{($i / 2)}px !important;
    }
  }

  @if ($responsive == true) {
    @include generateResponsive() {
      .gapX-#{$i}\@#{$breakpointAlias} {
        margin-left: #{($i / -2)}px !important;
        margin-right: #{($i / -2)}px !important;

        & > * {
          padding-left: #{($i / 2)}px !important;
          padding-right: #{($i / 2)}px !important;
        }
      }

      .gapY-#{$i}\@#{$breakpointAlias} {
        margin-top: #{($i / -2)}px !important;
        margin-bottom: #{($i / -2)}px !important;

        & > * {
          padding-top: #{($i / 2)}px !important;
          padding-bottom: #{($i / 2)}px !important;
        }
      }

      .gap-#{$i}\@#{$breakpointAlias} {
        margin: #{($i / -2)}px !important;

        & > * {
          padding: #{($i / 2)}px !important;
        }
      }
    }
  }
}

// ---------------------------------------------------------
// @Gap (5 > 35 Step 5)
// ---------------------------------------------------------

@for $i from 5 through 35 {
  @if $i % 5 == 0 {
    .gapX-#{$i} {
      margin-left: #{($i / -2)}px !important;
      margin-right: #{($i / -2)}px !important;

      & > * {
        padding-left: #{($i / 2)}px !important;
        padding-right: #{($i / 2)}px !important;
      }
    }

    .gapY-#{$i} {
      margin-top: #{($i / -2)}px !important;
      margin-bottom: #{($i / -2)}px !important;

      & > * {
        padding-top: #{($i / 2)}px !important;
        padding-bottom: #{($i / 2)}px !important;
      }
    }

    .gap-#{$i} {
      margin: #{($i / -2)}px !important;

      & > * {
        padding: #{($i / 2)}px !important;
      }
    }

    @if ($responsive == true) {
      @include generateResponsive() {
        .gapX-#{$i}\@#{$breakpointAlias} {
          margin-left: #{($i / -2)}px !important;
          margin-right: #{($i / -2)}px !important;

          & > * {
            padding-left: #{($i / 2)}px !important;
            padding-right: #{($i / 2)}px !important;
          }
        }

        .gapY-#{$i}\@#{$breakpointAlias} {
          margin-top: #{($i / -2)}px !important;
          margin-bottom: #{($i / -2)}px !important;

          & > * {
            padding-top: #{($i / 2)}px !important;
            padding-bottom: #{($i / 2)}px !important;
          }
        }

        .gap-#{$i}\@#{$breakpointAlias} {
          margin: #{($i / -2)}px !important;

          & > * {
            padding: #{($i / 2)}px !important;
          }
        }
      }
    }
  }
}

// ---------------------------------------------------------
// @Gap (40 > 160 Step 10)
// ---------------------------------------------------------

@for $i from 40 through 160 {
  @if $i % 10 == 0 {
    .gapX-#{$i} {
      margin-left: #{($i / -2)}px !important;
      margin-right: #{($i / -2)}px !important;

      & > * {
        padding-left: #{($i / 2)}px !important;
        padding-right: #{($i / 2)}px !important;
      }
    }

    .gapY-#{$i} {
      margin-top: #{($i / -2)}px !important;
      margin-bottom: #{($i / -2)}px !important;

      & > * {
        padding-top: #{($i / 2)}px !important;
        padding-bottom: #{($i / 2)}px !important;
      }
    }

    .gap-#{$i} {
      margin: #{($i / -2)}px !important;

      & > * {
        padding: #{($i / 2)}px !important;
      }
    }

    @if ($responsive == true) {
      @include generateResponsive() {
        .gapX-#{$i}\@#{$breakpointAlias} {
          margin-left: #{($i / -2)}px !important;
          margin-right: #{($i / -2)}px !important;

          & > * {
            padding-left: #{($i / 2)}px !important;
            padding-right: #{($i / 2)}px !important;
          }
        }

        .gapY-#{$i}\@#{$breakpointAlias} {
          margin-top: #{($i / -2)}px !important;
          margin-bottom: #{($i / -2)}px !important;

          & > * {
            padding-top: #{($i / 2)}px !important;
            padding-bottom: #{($i / 2)}px !important;
          }
        }

        .gap-#{$i}\@#{$breakpointAlias} {
          margin: #{($i / -2)}px !important;

          & > * {
            padding: #{($i / 2)}px !important;
          }
        }
      }
    }
  }
}
// ---------------------------------------------------------
// @TOC
// ---------------------------------------------------------

// + @Variables
// + @Centering

// ---------------------------------------------------------
// @Variables
// ---------------------------------------------------------

$responsive: true;

// ---------------------------------------------------------
// @Centering
// ---------------------------------------------------------

.centerY {
  top: 50%;
  transform: translateY(-50%);
}

.centerX {
  left: 50%;
  transform: translateX(-50%);
}

.centerXY {
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@if ($responsive == true) {
  @include generateResponsive() {
    .centerY\@#{$breakpointAlias} {
      top: 50%;
      transform: translateY(-50%);
    }

    .centerX\@#{$breakpointAlias} {
      left: 50%;
      transform: translateX(-50%);
    }

    .centerXY\@#{$breakpointAlias} {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }
  }
}
.peers {
  box-sizing: border-box;
  display: flex !important;
  align-items: flex-start;
  justify-content: flex-start;
  flex-flow: row wrap;
  height: auto;
  max-width: 100%;
  margin: 0;
  padding: 0;
}

.peer {
  display: block;
  height: auto;
  flex: 0 0 auto;
}

.peer-greed {
  flex: 1 1 auto;
  // overflow: hidden;
}

.peers-greed > .peer,
.peers-greed > .peers {
  flex: 1 1 auto;
}

.peer > img {
  max-width: none;
}

.peer-greed > img {
  max-width: 100%;
}
.layers {
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
}
// ---------------------------------------------------------
// @Media Queries Generator
// ---------------------------------------------------------

// Mixin used to generate responsive versions of css rules.

@mixin mediaQueryCondition($mq) {
  $breakpointFound: false;

  @each $breakpoint in $breakpoints {
    $alias: nth($breakpoint, 1);
    $condition: nth($breakpoint, 2);

    @if $mq == $alias and $condition {
      $breakpointFound: true;

      @media #{$condition} {
        @content;
      }
    }
  }

  @if $breakpointFound == false {
    @warn "Oops! Breakpoint ¡®#{$mq}¡¯ does not exist \:";
  }
}
// ---------------------------------------------------------
// @Responsive Suffix Generator
// ---------------------------------------------------------

// Mixin used to generate responsive suffixes for classes (i.e. m-10@sm+).


@mixin generateResponsive() {
  @each $breakpoint in $breakpoints {
    $breakpointAlias     : nth($breakpoint, 1) !global;
    $breakpointCondition : nth($breakpoint, 2);

    @include mediaQueryCondition($breakpointAlias) {
      @content;
    }

    $breakpointAlias: null !global;
  }
}
